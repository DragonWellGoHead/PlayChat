package com.godo.playChat.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Map;
import java.util.Scanner;

import com.godo.playChat.common.utils.AESUtils;
import com.godo.playChat.common.utils.RSAUtils;
import com.godo.playChat.common.utils.message.ChatMess;
import com.godo.playChat.common.utils.message.ExchangeMess;
import com.godo.playChat.common.utils.socket.SecSocket;

public class TcpClient  {
    
    private static final String serverIP        = "127.0.0.1";
    private static final int serverPORT         = 3434;
    private static final int serverFilePORT     = 3535;
    private final static Map<String, Object> keyPair   = RSAUtils.genKeyPair();
    private final static String clientPublicKey  = RSAUtils.getPublicKey(keyPair);
    private final static String clientPrivateKey = RSAUtils.getPrivateKey(keyPair);
    private static String shareKey = null;
    private static String myName;
    private static String baseStore = "./clientStoreFile";


    private static class SendFile implements Runnable {

        private String filePath;
        private SecSocket<ChatMess>  secSocket;
        private FileInputStream  fis; 
        private DataOutputStream dos;
        public SendFile(String filePath, SecSocket<ChatMess> secSocket) {
            this.filePath  = filePath;
            this.secSocket = secSocket;
        }
        
        @Override
        public void run() {
            try {
                File file = new File(filePath);
                if (file.exists()) {
                    fis = new FileInputStream(file);
                    dos = new DataOutputStream(secSocket.getSocket().getOutputStream());
                    
                    dos.writeUTF(file.getName());
                    dos.flush();
                    dos.writeLong(file.length());
                    dos.flush();
                    
                    
                    System.out.println("========开始传输文件========");
                    byte[] bytes = new byte[1024];
                    int length = 0;
                    long progress = 0;
                    while((length = fis.read(bytes, 0, bytes.length)) != -1) {
                        
                        byte[] enBytes = AESUtils.encrypt(Arrays.copyOfRange(bytes, 0, length), shareKey);
                        dos.writeLong(enBytes.length);
                        dos.flush();
                        dos.write(enBytes, 0, enBytes.length);
                        dos.flush();
                        progress += length;
                        System.out.print("=>" +(100*progress/file.length()) + "%");
                    }
                    System.out.println();
                    System.out.println("========文件传输成功========");
                    
                }else {
                    System.out.println("File is not existed: " + filePath);
                }
            } catch (Exception e) {
                // TODO: handle exception
            }finally {
                if(fis != null) {
                    try {
                        fis.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                secSocket.close();
            }
  
            
        }
        
    }
    
    private static class ReceiveFile implements Runnable{


        private String fileName;
        private SecSocket<ChatMess>  secSocket;
        private FileInputStream  fis; 
        private FileOutputStream fos;
        private DataOutputStream dos;
        private DataInputStream  dis;
        public ReceiveFile(String fileName, SecSocket<ChatMess> secSocket) {
            this.fileName  = fileName;
            this.secSocket = secSocket;
        }
        
        @Override
        public void run() {
            try {
                dis = new DataInputStream(secSocket.getSocket().getInputStream());
                dos = new DataOutputStream(secSocket.getSocket().getOutputStream());
                dos.writeUTF(fileName);
                dos.flush();
                File dir = new File(baseStore + File.separatorChar + myName);
                if (!dir.exists()) {
                    dir.mkdirs();
                }
                File file = new File(dir.getAbsolutePath() + File.separatorChar + fileName);
                fos = new FileOutputStream(file);
                while(true) {
                    try {
                        long len = dis.readLong();
                        if (len > 0) {
                            byte[] data = new byte[(int) len];
                            dis.read(data, 0, data.length);
                            byte[] deData = AESUtils.decrypt(data, shareKey);
                            fos.write(deData, 0, deData.length);
                            fos.flush();
                        }else {
                            break;
                        }
                    } catch (Exception e) {
                        // TODO: handle exception
                        e.printStackTrace();
                        break;
                    }
         
                }
                System.out.println("File Receive Filished: " + file.getAbsolutePath());
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }finally {
                if (fos != null) {
                    try {
                        fos.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
      
//                secSocket.close();
            }
  
            
        }
        
    
    }
    
    private static class SocketReceive implements Runnable{
        
        private SecSocket<ChatMess> sSocket;
        
        public SocketReceive(SecSocket<ChatMess> socket) {
            this.sSocket = socket;
        }
    
        @Override
        public void run() {
            
            while(!sSocket.isClosed()) {
                
                ChatMess chatMess = sSocket.readMsg();
                if (chatMess == null) {
                    continue;
                }
                String cmd = chatMess.getCmd();
                String msg = chatMess.getMsg();
                String from = chatMess.getFrom();
                String fromIP = chatMess.getFromIP();
                String toName = chatMess.getToName();
                if (myName == null && toName != null) {
                    myName = toName;
                }
                
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Date time = chatMess.getTime();
                String  timeStamp = time != null?sdf.format(time):"---";
                
                if (cmd.contentEquals("file")) {
                    
                    File filePath = new File(baseStore + File.separatorChar + msg.trim());
                    
                    //String filePath = s.substring(index+1).trim();
                    Socket fileSocket;
                    try {
                        fileSocket = new Socket(serverIP, serverFilePORT);
                        SecSocket<ExchangeMess> exSecSocket = new SecSocket<ExchangeMess>(shareKey, 
                                fileSocket, ExchangeMess.class);
                        boolean flag = initFileSecureSocket(exSecSocket, "syn-receivefile");
                        if (flag) {
                            System.out.println("initFileSecureSocket success");
                            SecSocket<ChatMess> fileSecSocket = new SecSocket<ChatMess>(shareKey,
                                    fileSocket, ChatMess.class);
                            Thread receiver = new Thread(new ReceiveFile(filePath.getName(), fileSecSocket));
                            receiver.start();
                            receiver.join();
                            // send msg
                            chatMess = new ChatMess("file-ok", "@"+from+":"+filePath.getName());
                            if (sSocket.isClosed()) {
                                System.out.println("Socket is Closed, Send Failed!");
                                break;
                            }
                            sSocket.writeMsg(chatMess);
                            
                        }else {
                            System.out.println("initFileSecureSocket failed");
                        }
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    
                    System.out.println(from + "("+fromIP+")" + timeStamp + " : \n" + 
                            "Receive File:" +msg + " and Save to " );
                    
                }else if(cmd.contentEquals("file-ok")) {
                    
                    System.out.println(from + "("+fromIP+")" + timeStamp + " : \n" + "Have Got File:" + msg);
                }else{
                    System.out.println(from + "("+fromIP+")" + timeStamp + " : \n" + msg);

                }
                
            }
      
        }
        
    }
    


    private static class SocketSend implements Runnable{
    
        private SecSocket<ChatMess> sSocket;
        public SocketSend(SecSocket<ChatMess> socket) {
            this.sSocket = socket;
        }
        
        @Override
        public void run() {
            
            Scanner scanner = new Scanner(System.in);
     
            while(!sSocket.isClosed()) {
                
                String s = scanner.nextLine();
                s = s.replaceAll("\t|\r|\n", " ").trim();
                ChatMess chatMess = null;
                if(s.startsWith("#")) {
                    // send file
                    int index = s.indexOf(":");
                    String name = s.substring(1, index).trim();
                    String filePath = s.substring(index+1).trim();
                    Socket fileSocket;
                    try {
                        fileSocket = new Socket(serverIP, serverFilePORT);
                        SecSocket<ExchangeMess> exSecSocket = new SecSocket<ExchangeMess>(shareKey, 
                                fileSocket, ExchangeMess.class);
                        boolean flag = initFileSecureSocket(exSecSocket, "syn-sendfile");
                        if (flag) {
                            System.out.println("initFileSecureSocket success");
                            SecSocket<ChatMess> fileSecSocket = new SecSocket<ChatMess>(shareKey,
                                    fileSocket, ChatMess.class);
                            Thread fileSender = new Thread(new SendFile(filePath, fileSecSocket));
                            fileSender.start();
                            fileSender.join();
                            // send msg
                            File file = new File(filePath);
                            chatMess = new ChatMess("file", "@"+name+":"+file.getName());
                            if (sSocket.isClosed()) {
                                System.out.println("Socket is Closed, Send Failed!");
                                break;
                            }
                            
                        }else {
                            System.out.println("initFileSecureSocket failed");
                        }
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    
  
                }else {
                    // send msg
                    chatMess = new ChatMess("txt", s);
                    if (sSocket.isClosed()) {
                        System.out.println("Socket is Closed, Send Failed!");
                        break;
                    }
                }
                
                sSocket.writeMsg(chatMess);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
    
            }
            scanner.close();
        
        }
        
    }
    
    
    
    private static boolean initFileSecureSocket(SecSocket<ExchangeMess> secSocket, String cmd) {
        // set Read TimeOut
        try {
            secSocket.getSocket().setSoTimeout(60000);
            
        } catch (SocketException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
            return false;
        }
        
        ObjectOutputStream writeMsg = null;
        try{
            int i = 0;
            while(i<3) {

                i++;
                Thread.sleep(100);
                // Send 1
                ExchangeMess sendMsg1 = new ExchangeMess(cmd, "null");
                sendMsg1.setName(myName);
                writeMsg = new ObjectOutputStream(secSocket.getSocket().getOutputStream());
                writeMsg.writeObject(sendMsg1);
                
                // Receive 1
                ExchangeMess receiveMsg1 = secSocket.readMsg();
                String cmd1 = receiveMsg1.getCmd();
//                String testMsg  = new String(receiveMsg1.getTestMsg());
                if(!cmd1.contentEquals("ack-sendfile")) {
                    continue;
                }
                
                // Send 2
                receiveMsg1.setCmd("syn-sendfile-2");
                secSocket.writeMsg(receiveMsg1);
       
                // Receive 2
                ExchangeMess receiveMsg2 = secSocket.readMsg();
                String cmd2 = receiveMsg2.getCmd();
                if (cmd2.contentEquals("ack-sendfile-ok")) {
                    secSocket.getSocket().setSoTimeout(0);
                    return true;
                }
                
            }
            
        } catch (IOException e) {
            
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        return false;
    }

    
    
    private static String initSecureSocket(Socket socket) {
        // set Read TimeOut
        try {
            socket.setSoTimeout(60000);
            
        } catch (SocketException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        
        ObjectOutputStream  writeMsg = null;
        ObjectInputStream   readMsg  = null;
        try{
            int i = 0;
            while(i<3) {

                i++;
                Thread.sleep(100);
                // Send 1
                writeMsg = new ObjectOutputStream(socket.getOutputStream());
                ExchangeMess sendMsg1 = new ExchangeMess("syn-publicKey", clientPublicKey);
                writeMsg.writeObject(sendMsg1);
                
                // Receive 1
                readMsg =  new ObjectInputStream(socket.getInputStream());
                ExchangeMess receiveMsg1 = (ExchangeMess)readMsg.readObject();
                String cmd1 = receiveMsg1.getCmd();
                if(!cmd1.contentEquals("ack-publicKey")) {
                    continue;
                }
                String publicKey = receiveMsg1.getPublicKey();
                byte[] testMsg   = receiveMsg1.getTestMsg();
                String shareKey = new String(
                                    RSAUtils.decryptByPrivateKey(testMsg, clientPrivateKey));
                
                // Send 2
                ExchangeMess sendMsg2 = new ExchangeMess("ack-testMsg", "null");
                byte[] enTestMsg = RSAUtils.encryptByPublicKey(shareKey.getBytes(), publicKey);
                sendMsg2.setTestMsg(enTestMsg);
                writeMsg.writeObject(sendMsg2);
       
                // Receive 2
                ExchangeMess receiveMsg2 = (ExchangeMess)readMsg.readObject();
                String cmd2 = receiveMsg2.getCmd();
                if (cmd2.contentEquals("ack-testMsg-ok")) {
                    socket.setSoTimeout(0);
                    return shareKey;
                }
                
            }
            
        } catch (IOException e) {
            
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            // 对象消息解析错误
            //e.printStackTrace();
            System.out.println("exchange publicKey failed!");
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        return null;
    }
    
    public static void start() {

        try {
            Socket socket = new Socket(serverIP, serverPORT);
            shareKey = initSecureSocket(socket);
            if (shareKey != null) {
                System.out.println("Client Open SecureSocket");
            }else {
                System.out.println("Client Do Not Open SecureSocket");
            }
            
            SecSocket<ChatMess> sSocket = new SecSocket<ChatMess>(shareKey, socket, ChatMess.class);
    
            Thread tSend    = new Thread(new SocketSend(sSocket));
            Thread tReceive = new Thread(new SocketReceive(sSocket));
            tSend.start();
            tReceive.start();
            tSend.join();
            tReceive.join();
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            //e.printStackTrace();
            System.out.println("Connection refused: (serverIP: " + serverIP +" || serverPORT: " + serverPORT + ")");
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally {
            System.out.println("Client exit...");
        }
    }

}
