package com.godo.playChat.common.utils.socket;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.godo.playChat.common.utils.AESUtils;
import com.godo.playChat.common.utils.Base64Utils;
import com.godo.playChat.common.utils.RSAUtils;

public class SecSocket<T> {
    
    private String shareKey;
    private Socket socket;
    
    private Class clazz;
    
    public  SecSocket(String shareKey, Socket socket, Class t) {
        this.shareKey      = shareKey;
        this.socket        = socket;
        
        this.clazz = t;
    }
    
    public void writeMsg(T chatMess) {
        
        try {
            
            ObjectMapper mapper = new ObjectMapper();
            String jsonString = mapper.writeValueAsString(chatMess);
            String encrypt = AESUtils.encrypt(jsonString, shareKey);
            new ObjectOutputStream(socket.getOutputStream()).writeObject(encrypt);

        } catch (JsonProcessingException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }catch (IOException e) {
            // TODO Auto-generated catch block
            //e.printStackTrace();
            try {
                socket.close();
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            System.out.println("Socket Write is Closed!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    public T readMsg() {
        
        ObjectMapper  mapper = new ObjectMapper();
        try {
            String base64Encrypt = (String) new ObjectInputStream(socket.getInputStream()).readObject();
            String jsonDecrypt = new String(
                    AESUtils.decrypt(base64Encrypt, shareKey)
             );

            T  chatMess = (T) mapper.readValue(jsonDecrypt, clazz);
            
            return chatMess;
            
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }catch (IOException e) {
            // TODO: handle exception
            try {
                socket.close();
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            System.out.println("Socket Read is Closed!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        return null;
    }
    
    public void close() {
        try {
            this.socket.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public boolean isClosed() {
        
        return socket.isClosed();
    }
    
    public String getIP() {
        
        return socket.getInetAddress().getHostAddress();
    }
    
    

}
